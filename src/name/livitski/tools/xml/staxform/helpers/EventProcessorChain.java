/**
 *    Copyright Â© 2013 Konstantin Livitski
 * 
 *    This file is part of StAXform. StAXform is
 *    licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package name.livitski.tools.xml.staxform.helpers;

import javax.xml.stream.XMLStreamException;
import javax.xml.stream.events.XMLEvent;

import name.livitski.tools.xml.staxform.XMLEventProcessor;

/**
 * Combines two {@link XMLEventProcessor event processors} into
 * a chain. 
 */
public class EventProcessorChain implements XMLEventProcessor
{
 /**
  * Creates a chain from two {@link XMLEventProcessor event processors}.
  * You should call {@link #reset()} before using the chain
  * to make sure that events initially generated by the first processor
  * are received by the second one. 
  * @param first the processor that will receive external input
  * and produce output for the second processor
  * @param second the processor that will receive input from the first
  * processor produce the output for this aggregate
  */
 public EventProcessorChain(XMLEventProcessor first, XMLEventProcessor second)
 {
  if (null == first || null == second)
   throw new NullPointerException();
  this.first = first;
  this.second = second;
 }

 public void reset() throws XMLStreamException
 {
  first.reset();
  second.reset();
  convey();
 }

 public void add(XMLEvent event) throws XMLStreamException
 {
  first.add(event);
  convey();
 }

 public boolean hasNext()
 {
  return second.hasNext();
 }

 public XMLEvent next()
 {
  return second.next();
 }

 public void remove()
 {
  throw new UnsupportedOperationException();
 }

 private void convey() throws XMLStreamException
 {
  while (first.hasNext())
  {
   XMLEvent inter = first.next();
   second.add(inter);
  }
 }

 private XMLEventProcessor first, second;
}
