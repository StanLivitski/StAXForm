/**
 *    Copyright Â© 2013 Konstantin Livitski
 * 
 *    This file is part of StAXform. StAXform is
 *    licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package name.livitski.tools.xml.staxform.helpers;

import javax.xml.stream.EventFilter;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.events.XMLEvent;

import name.livitski.tools.xml.staxform.XMLEventProcessor;

/**
 * Examines a stream of {@link XMLEvent XML events}, extracts
 * events satisfying a {@link EventFilter filter},
 * forwards them to the target {@link XMLEventProcessor}, and
 * includes that processor's output in the result. Events that
 * do not pass the filter are included in this processor's output
 * unchanged. Initial events generated by the target
 * {@link XMLEventProcessor} become this processor's initial
 * events.
 */
public class ConditionalEventProcessor extends IdentityEventProcessor
{
 @Override
 public void add(XMLEvent event) throws XMLStreamException
 {
  boolean accepted;
  try
  {
   accepted = filter.accept(event);
  }
  catch (RuntimeException e)
  {
   if (Boolean.getBoolean(DEBUG_PROPERTY))
    e.printStackTrace();
   throw new XMLStreamException(e.getLocalizedMessage(), event.getLocation(), e);
  }
  if (accepted)
  {
   target.add(event);
   convey();
  }
  else
   super.add(event);
 }
 
 @Override
 public void reset() throws XMLStreamException
 {
  super.reset();
  target.reset();
  convey();
 }

 /**
  * Creates a switching processor using a {@link EventFilter filter}
  * and a target {@link XMLEventProcessor}.
  * @param filter the filter that determines whether target processor
  * should process an event
  * @param target the target processor
  */
 public ConditionalEventProcessor(EventFilter filter, XMLEventProcessor target)
 {
  if (null == filter || null == target)
   throw new NullPointerException();
  this.target = target;
  this.filter = filter;
 }

 private void convey() throws XMLStreamException
 {
  while (target.hasNext())
  {
   XMLEvent inter = target.next();
   super.add(inter);
  }
 }

 private EventFilter filter;
 private XMLEventProcessor target;
}
